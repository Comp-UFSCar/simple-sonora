/*
 * generated by Xtext
 */
package org.xtext.simplesonora.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.simplesonora.services.SimpleSonoraGrammarAccess;

public class SimpleSonoraParser extends AbstractContentAssistParser {
	
	@Inject
	private SimpleSonoraGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser createParser() {
		org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser result = new org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSequenceAccess().getAlternatives_1(), "rule__Sequence__Alternatives_1");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup_0(), "rule__Header__Group_0__0");
					put(grammarAccess.getHeaderAccess().getGroup_1(), "rule__Header__Group_1__0");
					put(grammarAccess.getHeaderAccess().getGroup_2(), "rule__Header__Group_2__0");
					put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getChordAccess().getGroup(), "rule__Chord__Group__0");
					put(grammarAccess.getChordAccess().getGroup_1(), "rule__Chord__Group_1__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getFileAccess().getHeaderAssignment_0(), "rule__File__HeaderAssignment_0");
					put(grammarAccess.getFileAccess().getMelodyAssignment_1(), "rule__File__MelodyAssignment_1");
					put(grammarAccess.getHeaderAccess().getTempoAssignment_0_2(), "rule__Header__TempoAssignment_0_2");
					put(grammarAccess.getHeaderAccess().getTimeAssignment_1_2(), "rule__Header__TimeAssignment_1_2");
					put(grammarAccess.getHeaderAccess().getKeyAssignment_2_2(), "rule__Header__KeyAssignment_2_2");
					put(grammarAccess.getMelodyAccess().getSequencesAssignment(), "rule__Melody__SequencesAssignment");
					put(grammarAccess.getSequenceAccess().getOctaveAssignment_0(), "rule__Sequence__OctaveAssignment_0");
					put(grammarAccess.getSequenceAccess().getNoteAssignment_1_0(), "rule__Sequence__NoteAssignment_1_0");
					put(grammarAccess.getSequenceAccess().getChordAssignment_1_1(), "rule__Sequence__ChordAssignment_1_1");
					put(grammarAccess.getChordAccess().getChordNotesAssignment_0(), "rule__Chord__ChordNotesAssignment_0");
					put(grammarAccess.getChordAccess().getChordNotesAssignment_1_1(), "rule__Chord__ChordNotesAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser typedParser = (org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser) parser;
			typedParser.entryRuleFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SimpleSonoraGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SimpleSonoraGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
