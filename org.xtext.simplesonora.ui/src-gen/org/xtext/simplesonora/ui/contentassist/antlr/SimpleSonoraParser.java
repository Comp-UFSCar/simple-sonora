/*
 * generated by Xtext
 */
package org.xtext.simplesonora.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.simplesonora.services.SimpleSonoraGrammarAccess;

public class SimpleSonoraParser extends AbstractContentAssistParser {
	
	@Inject
	private SimpleSonoraGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser createParser() {
		org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser result = new org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSequenceAccess().getAlternatives(), "rule__Sequence__Alternatives");
					put(grammarAccess.getSequenceAccess().getAlternatives_0(), "rule__Sequence__Alternatives_0");
					put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup_0(), "rule__Header__Group_0__0");
					put(grammarAccess.getHeaderAccess().getGroup_1(), "rule__Header__Group_1__0");
					put(grammarAccess.getHeaderAccess().getGroup_2(), "rule__Header__Group_2__0");
					put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
					put(grammarAccess.getInstrumentAccess().getGroup(), "rule__Instrument__Group__0");
					put(grammarAccess.getHarmonyAccess().getGroup(), "rule__Harmony__Group__0");
					put(grammarAccess.getHarmonyAccess().getGroup_1(), "rule__Harmony__Group_1__0");
					put(grammarAccess.getChordAccess().getGroup(), "rule__Chord__Group__0");
					put(grammarAccess.getChordAccess().getGroup_1(), "rule__Chord__Group_1__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getDocumentAccess().getHeaderAssignment_0(), "rule__Document__HeaderAssignment_0");
					put(grammarAccess.getDocumentAccess().getSongAssignment_1(), "rule__Document__SongAssignment_1");
					put(grammarAccess.getHeaderAccess().getSongNameAssignment_0_2(), "rule__Header__SongNameAssignment_0_2");
					put(grammarAccess.getHeaderAccess().getTempoAssignment_1_2(), "rule__Header__TempoAssignment_1_2");
					put(grammarAccess.getHeaderAccess().getKeyAssignment_2_2(), "rule__Header__KeyAssignment_2_2");
					put(grammarAccess.getSongAccess().getInstrumentsAssignment(), "rule__Song__InstrumentsAssignment");
					put(grammarAccess.getInstrumentAccess().getInstrumentNameAssignment_0(), "rule__Instrument__InstrumentNameAssignment_0");
					put(grammarAccess.getInstrumentAccess().getSequencesAssignment_2(), "rule__Instrument__SequencesAssignment_2");
					put(grammarAccess.getSequenceAccess().getNoteAssignment_0_0(), "rule__Sequence__NoteAssignment_0_0");
					put(grammarAccess.getSequenceAccess().getChordAssignment_0_1(), "rule__Sequence__ChordAssignment_0_1");
					put(grammarAccess.getSequenceAccess().getHarmonyAssignment_0_2(), "rule__Sequence__HarmonyAssignment_0_2");
					put(grammarAccess.getSequenceAccess().getMeasureAssignment_1(), "rule__Sequence__MeasureAssignment_1");
					put(grammarAccess.getHarmonyAccess().getHarmonyNotesAssignment_0(), "rule__Harmony__HarmonyNotesAssignment_0");
					put(grammarAccess.getHarmonyAccess().getHarmonyNotesAssignment_1_1(), "rule__Harmony__HarmonyNotesAssignment_1_1");
					put(grammarAccess.getHarmonyAccess().getNotesAssignment_3(), "rule__Harmony__NotesAssignment_3");
					put(grammarAccess.getChordAccess().getChordNotesAssignment_0(), "rule__Chord__ChordNotesAssignment_0");
					put(grammarAccess.getChordAccess().getChordNotesAssignment_1_1(), "rule__Chord__ChordNotesAssignment_1_1");
					put(grammarAccess.getNoteAccess().getOctaveAssignment_0(), "rule__Note__OctaveAssignment_0");
					put(grammarAccess.getNoteAccess().getNoteAssignment_1(), "rule__Note__NoteAssignment_1");
					put(grammarAccess.getNoteAccess().getAccidentalAssignment_2(), "rule__Note__AccidentalAssignment_2");
					put(grammarAccess.getNoteAccess().getDurationAssignment_3(), "rule__Note__DurationAssignment_3");
					put(grammarAccess.getNoteAccess().getPointAssignment_4(), "rule__Note__PointAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser typedParser = (org.xtext.simplesonora.ui.contentassist.antlr.internal.InternalSimpleSonoraParser) parser;
			typedParser.entryRuleDocument();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SimpleSonoraGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SimpleSonoraGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
