/*
 * generated by Xtext
 */
package org.xtext.simplesonora.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.jfugue.player.Player
import org.xtext.simplesonora.simpleSonora.Note
import org.xtext.simplesonora.simpleSonora.Header
import org.jfugue.pattern.Pattern
import org.jfugue.midi.MidiFileManager
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SimpleSonoraGenerator implements IGenerator {
	//variavel auxiliar que será usada para guardar uma nota completa para ser inserida no pattern
	String auxNote = new String("");
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val player = new Player();		
		val pattern=new Pattern();
		//adição de todas as notas ao pattern q sera tocado
		for(Note n :resource.allContents.toIterable.filter(Note)){
			auxNote=n.note;
			
			//em caso de haver um acidente, ele será adicionado em seguida da nota
			if(n.accidental!=null){
				auxNote = auxNote.concat(n.accidental.accidentalToStaccato);	
			}
			
			//em caso de haver uma duração, ela será adicionada em seguida da nota, ou do acidente
			if(n.duration!=null){
				auxNote = auxNote.concat(n.duration.durationToStaccato);	
			}
			
			//insere a pattern que foi criada acima
			pattern.add(auxNote)
		}		
		
		//busca informações do header para personalizar o player
		for(Header h :resource.allContents.toIterable.filter(Header)){
			pattern.tempo = h.tempo;
			
			MidiFileManager.savePatternToMidi(pattern,new File(h.songName+".midi"));
		}
		
		//toca o pattern criado nos loops anteriores
		player.play(pattern);
		System.out.println(pattern.toString);
	}
	
	//essa funcao converte as durações numérica para o formato de letras usado pelo Staccato
	//NOTE: veja que os cases possuem um ':', isso deverá ser alterado no advento da remoção
	//do ':'
	def String durationToStaccato(String dur){
		switch(dur){
			case ':1':
			return 'w'			
			case ':2':
			return 'h'
			case ':4':
			return 'q'
			case ':8':
			return 'i'
			case ':16':
			return 's'
			case ':32':
			return 't'
			case ':64':
			return 'x'
			case ':128':
			return 'o'			
		}		
		
		return "";
	}
	
	def String accidentalToStaccato(String acc){
		switch(acc){
			case '+':
			return '#'			
			case '-':
			return 'b'			
		}		
		
		return "";
	}
}
