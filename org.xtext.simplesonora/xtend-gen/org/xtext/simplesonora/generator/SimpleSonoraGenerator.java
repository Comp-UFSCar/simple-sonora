/**
 * generated by Xtext
 */
package org.xtext.simplesonora.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.File;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.jfugue.midi.MidiFileManager;
import org.jfugue.pattern.Pattern;
import org.jfugue.player.Player;
import org.xtext.simplesonora.simpleSonora.Header;
import org.xtext.simplesonora.simpleSonora.Note;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SimpleSonoraGenerator implements IGenerator {
  private String auxNote = new String("");
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    try {
      final Player player = new Player();
      final Pattern pattern = new Pattern();
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Note> _filter = Iterables.<Note>filter(_iterable, Note.class);
      for (final Note n : _filter) {
        {
          String _note = n.getNote();
          this.auxNote = _note;
          String _duration = n.getDuration();
          boolean _notEquals = (!Objects.equal(_duration, null));
          if (_notEquals) {
            String _duration_1 = n.getDuration();
            String _staccato = this.toStaccato(_duration_1);
            String _concat = this.auxNote.concat(_staccato);
            this.auxNote = _concat;
          }
          pattern.add(this.auxNote);
        }
      }
      TreeIterator<EObject> _allContents_1 = resource.getAllContents();
      Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
      Iterable<Header> _filter_1 = Iterables.<Header>filter(_iterable_1, Header.class);
      for (final Header h : _filter_1) {
        {
          int _tempo = h.getTempo();
          pattern.setTempo(_tempo);
          String _songName = h.getSongName();
          String _plus = (_songName + ".midi");
          File _file = new File(_plus);
          MidiFileManager.savePatternToMidi(pattern, _file);
        }
      }
      player.play(pattern);
      String _string = pattern.toString();
      System.out.println(_string);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String toStaccato(final String acc) {
    switch (acc) {
      case ":1":
        return "w";
      case ":2":
        return "h";
      case ":4":
        return "q";
      case ":8":
        return "i";
      case ":16":
        return "s";
      case ":32":
        return "t";
      case ":64":
        return "x";
      case ":128":
        return "o";
    }
    return "";
  }
}
