/*
 * generated by Xtext
 */
package org.xtext.simplesonora.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleSonoraGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cMelodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMelodyMelodyParserRuleCall_1_0 = (RuleCall)cMelodyAssignment_1.eContents().get(0);
		
		//Document:
		//	header=Header melody=Melody;
		@Override public ParserRule getRule() { return rule; }

		//header=Header melody=Melody
		public Group getGroup() { return cGroup; }

		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }

		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }

		//melody=Melody
		public Assignment getMelodyAssignment_1() { return cMelodyAssignment_1; }

		//Melody
		public RuleCall getMelodyMelodyParserRuleCall_1_0() { return cMelodyMelodyParserRuleCall_1_0; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSongNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSongNameIDTerminalRuleCall_0_2_0 = (RuleCall)cSongNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTempoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTempoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTempoINTTerminalRuleCall_1_2_0 = (RuleCall)cTempoAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTimeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTimeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTimeTIMETerminalRuleCall_2_2_0 = (RuleCall)cTimeAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKeyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cKeyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cKeyKeyParserRuleCall_3_2_0 = (RuleCall)cKeyAssignment_3_2.eContents().get(0);
		
		/// * Header of the file containing the tempo, time and key of melody. * / Header:
		//	("name" "=" songName=ID) ("tempo" "=" tempo=INT) ("time" "=" time=TIME) ("key" "=" key=Key);
		@Override public ParserRule getRule() { return rule; }

		//("name" "=" songName=ID) ("tempo" "=" tempo=INT) ("time" "=" time=TIME) ("key" "=" key=Key)
		public Group getGroup() { return cGroup; }

		//"name" "=" songName=ID
		public Group getGroup_0() { return cGroup_0; }

		//"name"
		public Keyword getNameKeyword_0_0() { return cNameKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//songName=ID
		public Assignment getSongNameAssignment_0_2() { return cSongNameAssignment_0_2; }

		//ID
		public RuleCall getSongNameIDTerminalRuleCall_0_2_0() { return cSongNameIDTerminalRuleCall_0_2_0; }

		//"tempo" "=" tempo=INT
		public Group getGroup_1() { return cGroup_1; }

		//"tempo"
		public Keyword getTempoKeyword_1_0() { return cTempoKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//tempo=INT
		public Assignment getTempoAssignment_1_2() { return cTempoAssignment_1_2; }

		//INT
		public RuleCall getTempoINTTerminalRuleCall_1_2_0() { return cTempoINTTerminalRuleCall_1_2_0; }

		//"time" "=" time=TIME
		public Group getGroup_2() { return cGroup_2; }

		//"time"
		public Keyword getTimeKeyword_2_0() { return cTimeKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//time=TIME
		public Assignment getTimeAssignment_2_2() { return cTimeAssignment_2_2; }

		//TIME
		public RuleCall getTimeTIMETerminalRuleCall_2_2_0() { return cTimeTIMETerminalRuleCall_2_2_0; }

		//"key" "=" key=Key
		public Group getGroup_3() { return cGroup_3; }

		//"key"
		public Keyword getKeyKeyword_3_0() { return cKeyKeyword_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//key=Key
		public Assignment getKeyAssignment_3_2() { return cKeyAssignment_3_2; }

		//Key
		public RuleCall getKeyKeyParserRuleCall_3_2_0() { return cKeyKeyParserRuleCall_3_2_0; }
	}

	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNOTE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cACCIDENTALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Key:
		//	NOTE_ID ACCIDENTAL?;
		@Override public ParserRule getRule() { return rule; }

		//NOTE_ID ACCIDENTAL?
		public Group getGroup() { return cGroup; }

		//NOTE_ID
		public RuleCall getNOTE_IDTerminalRuleCall_0() { return cNOTE_IDTerminalRuleCall_0; }

		//ACCIDENTAL?
		public RuleCall getACCIDENTALTerminalRuleCall_1() { return cACCIDENTALTerminalRuleCall_1; }
	}

	public class MelodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Melody");
		private final Assignment cSequencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSequencesSequenceParserRuleCall_0 = (RuleCall)cSequencesAssignment.eContents().get(0);
		
		/// * The body of the file with melody. * / Melody:
		//	sequences+=Sequence+;
		@Override public ParserRule getRule() { return rule; }

		//sequences+=Sequence+
		public Assignment getSequencesAssignment() { return cSequencesAssignment; }

		//Sequence
		public RuleCall getSequencesSequenceParserRuleCall_0() { return cSequencesSequenceParserRuleCall_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOctaveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOctaveOCTAVETerminalRuleCall_0_0 = (RuleCall)cOctaveAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNoteAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNoteNoteParserRuleCall_1_0_0 = (RuleCall)cNoteAssignment_1_0.eContents().get(0);
		private final Assignment cChordAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cChordChordParserRuleCall_1_1_0 = (RuleCall)cChordAssignment_1_1.eContents().get(0);
		
		//Sequence:
		//	octave=OCTAVE? (note=Note | chord=Chord);
		@Override public ParserRule getRule() { return rule; }

		//octave=OCTAVE? (note=Note | chord=Chord)
		public Group getGroup() { return cGroup; }

		//octave=OCTAVE?
		public Assignment getOctaveAssignment_0() { return cOctaveAssignment_0; }

		//OCTAVE
		public RuleCall getOctaveOCTAVETerminalRuleCall_0_0() { return cOctaveOCTAVETerminalRuleCall_0_0; }

		//note=Note | chord=Chord
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//note=Note
		public Assignment getNoteAssignment_1_0() { return cNoteAssignment_1_0; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_1_0_0() { return cNoteNoteParserRuleCall_1_0_0; }

		//chord=Chord
		public Assignment getChordAssignment_1_1() { return cChordAssignment_1_1; }

		//Chord
		public RuleCall getChordChordParserRuleCall_1_1_0() { return cChordChordParserRuleCall_1_1_0; }
	}

	public class ChordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Chord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChordNotesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChordNotesNoteParserRuleCall_0_0 = (RuleCall)cChordNotesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChordNotesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChordNotesNoteParserRuleCall_1_1_0 = (RuleCall)cChordNotesAssignment_1_1.eContents().get(0);
		
		//Chord:
		//	chordNotes+=Note ("/" chordNotes+=Note)+;
		@Override public ParserRule getRule() { return rule; }

		//chordNotes+=Note ("/" chordNotes+=Note)+
		public Group getGroup() { return cGroup; }

		//chordNotes+=Note
		public Assignment getChordNotesAssignment_0() { return cChordNotesAssignment_0; }

		//Note
		public RuleCall getChordNotesNoteParserRuleCall_0_0() { return cChordNotesNoteParserRuleCall_0_0; }

		//("/" chordNotes+=Note)+
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//chordNotes+=Note
		public Assignment getChordNotesAssignment_1_1() { return cChordNotesAssignment_1_1; }

		//Note
		public RuleCall getChordNotesNoteParserRuleCall_1_1_0() { return cChordNotesNoteParserRuleCall_1_1_0; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNoteNOTE_IDTerminalRuleCall_0_0 = (RuleCall)cNoteAssignment_0.eContents().get(0);
		private final Assignment cAccidentalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccidentalACCIDENTALTerminalRuleCall_1_0 = (RuleCall)cAccidentalAssignment_1.eContents().get(0);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationDURATIONTerminalRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		
		//Note:
		//	note=NOTE_ID accidental=ACCIDENTAL? duration=DURATION?;
		@Override public ParserRule getRule() { return rule; }

		//note=NOTE_ID accidental=ACCIDENTAL? duration=DURATION?
		public Group getGroup() { return cGroup; }

		//note=NOTE_ID
		public Assignment getNoteAssignment_0() { return cNoteAssignment_0; }

		//NOTE_ID
		public RuleCall getNoteNOTE_IDTerminalRuleCall_0_0() { return cNoteNOTE_IDTerminalRuleCall_0_0; }

		//accidental=ACCIDENTAL?
		public Assignment getAccidentalAssignment_1() { return cAccidentalAssignment_1; }

		//ACCIDENTAL
		public RuleCall getAccidentalACCIDENTALTerminalRuleCall_1_0() { return cAccidentalACCIDENTALTerminalRuleCall_1_0; }

		//duration=DURATION?
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }

		//DURATION
		public RuleCall getDurationDURATIONTerminalRuleCall_2_0() { return cDurationDURATIONTerminalRuleCall_2_0; }
	}
	
	
	private final DocumentElements pDocument;
	private final HeaderElements pHeader;
	private final KeyElements pKey;
	private final TerminalRule tTIME;
	private final MelodyElements pMelody;
	private final SequenceElements pSequence;
	private final ChordElements pChord;
	private final NoteElements pNote;
	private final TerminalRule tOCTAVE;
	private final TerminalRule tACCIDENTAL;
	private final TerminalRule tNOTE_ID;
	private final TerminalRule tDURATION;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleSonoraGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pHeader = new HeaderElements();
		this.pKey = new KeyElements();
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME");
		this.pMelody = new MelodyElements();
		this.pSequence = new SequenceElements();
		this.pChord = new ChordElements();
		this.pNote = new NoteElements();
		this.tOCTAVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAVE");
		this.tACCIDENTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ACCIDENTAL");
		this.tNOTE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOTE_ID");
		this.tDURATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DURATION");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.simplesonora.SimpleSonora".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	header=Header melody=Melody;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	/// * Header of the file containing the tempo, time and key of melody. * / Header:
	//	("name" "=" songName=ID) ("tempo" "=" tempo=INT) ("time" "=" time=TIME) ("key" "=" key=Key);
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//Key:
	//	NOTE_ID ACCIDENTAL?;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}

	//terminal TIME:
	//	"3/4" | "4/4";
	public TerminalRule getTIMERule() {
		return tTIME;
	} 

	/// * The body of the file with melody. * / Melody:
	//	sequences+=Sequence+;
	public MelodyElements getMelodyAccess() {
		return pMelody;
	}
	
	public ParserRule getMelodyRule() {
		return getMelodyAccess().getRule();
	}

	//Sequence:
	//	octave=OCTAVE? (note=Note | chord=Chord);
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Chord:
	//	chordNotes+=Note ("/" chordNotes+=Note)+;
	public ChordElements getChordAccess() {
		return pChord;
	}
	
	public ParserRule getChordRule() {
		return getChordAccess().getRule();
	}

	//Note:
	//	note=NOTE_ID accidental=ACCIDENTAL? duration=DURATION?;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//terminal OCTAVE:
	//	"<"+ | "o" "0".."9" | ">"+;
	public TerminalRule getOCTAVERule() {
		return tOCTAVE;
	} 

	//terminal ACCIDENTAL:
	//	"+" | "-";
	public TerminalRule getACCIDENTALRule() {
		return tACCIDENTAL;
	} 

	//terminal NOTE_ID:
	//	"a".."g" | "A".."G";
	public TerminalRule getNOTE_IDRule() {
		return tNOTE_ID;
	} 

	/// *TODO: remover o uso dos dois pontos nessa regra * / terminal DURATION:
	//	":" ("1" | "2" | "4" | "8" | "16" | "32");
	public TerminalRule getDURATIONRule() {
		return tDURATION;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
