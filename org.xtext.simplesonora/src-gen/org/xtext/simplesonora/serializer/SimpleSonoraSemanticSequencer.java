/*
 * generated by Xtext
 */
package org.xtext.simplesonora.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.simplesonora.services.SimpleSonoraGrammarAccess;
import org.xtext.simplesonora.simpleSonora.Chord;
import org.xtext.simplesonora.simpleSonora.Document;
import org.xtext.simplesonora.simpleSonora.Harmony;
import org.xtext.simplesonora.simpleSonora.Header;
import org.xtext.simplesonora.simpleSonora.Instrument;
import org.xtext.simplesonora.simpleSonora.Key;
import org.xtext.simplesonora.simpleSonora.Note;
import org.xtext.simplesonora.simpleSonora.Sequence;
import org.xtext.simplesonora.simpleSonora.SimpleSonoraPackage;
import org.xtext.simplesonora.simpleSonora.Song;
import org.xtext.simplesonora.simpleSonora.Tempo;
import org.xtext.simplesonora.simpleSonora.Tuplet;

@SuppressWarnings("all")
public class SimpleSonoraSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleSonoraGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SimpleSonoraPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SimpleSonoraPackage.CHORD:
				sequence_Chord(context, (Chord) semanticObject); 
				return; 
			case SimpleSonoraPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case SimpleSonoraPackage.HARMONY:
				sequence_Harmony(context, (Harmony) semanticObject); 
				return; 
			case SimpleSonoraPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case SimpleSonoraPackage.INSTRUMENT:
				sequence_Instrument(context, (Instrument) semanticObject); 
				return; 
			case SimpleSonoraPackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case SimpleSonoraPackage.NOTE:
				sequence_Note(context, (Note) semanticObject); 
				return; 
			case SimpleSonoraPackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			case SimpleSonoraPackage.SONG:
				sequence_Song(context, (Song) semanticObject); 
				return; 
			case SimpleSonoraPackage.TEMPO:
				sequence_Tempo(context, (Tempo) semanticObject); 
				return; 
			case SimpleSonoraPackage.TUPLET:
				sequence_Tuplet(context, (Tuplet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (chordNotes+=Note (chordNotes+=Note+ | (chordName=ID (inversion='^' | inversion='^^')?)))
	 */
	protected void sequence_Chord(EObject context, Chord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (header=Header song=Song)
	 */
	protected void sequence_Document(EObject context, Document semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__HEADER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__HEADER));
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__SONG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__SONG));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDocumentAccess().getHeaderHeaderParserRuleCall_0_0(), semanticObject.getHeader());
		feeder.accept(grammarAccess.getDocumentAccess().getSongSongParserRuleCall_1_0(), semanticObject.getSong());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (harmonyNotes+=Note harmonyNotes+=Note* notes+=Note+)
	 */
	protected void sequence_Harmony(EObject context, Harmony semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nofeedback?='no-feedback'? songName=ID tempo=Tempo? key=Key?)
	 */
	protected void sequence_Header(EObject context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (instrumentName=ID sequences+=Sequence*)
	 */
	protected void sequence_Instrument(EObject context, Instrument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (note=NOTE_ID accidental=ACCIDENTAL? (interval='major' | interval='minor'))
	 */
	protected void sequence_Key(EObject context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         octave=OCTAVE? 
	 *         note=NOTE_ID 
	 *         accidental=ACCIDENTAL? 
	 *         duration=DURATION? 
	 *         point?='.'? 
	 *         tie?='_'?
	 *     )
	 */
	protected void sequence_Note(EObject context, Note semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (note=Note | chord=Chord | harmony=Harmony | tuplet=Tuplet | measure?=MEASURE)
	 */
	protected void sequence_Sequence(EObject context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     instruments+=Instrument+
	 */
	protected void sequence_Song(EObject context, Song semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=INT | id=ID)
	 */
	protected void sequence_Tempo(EObject context, Tempo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((tuplet+=Note | tuplet+=Chord)+ duration=DURATION)
	 */
	protected void sequence_Tuplet(EObject context, Tuplet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
