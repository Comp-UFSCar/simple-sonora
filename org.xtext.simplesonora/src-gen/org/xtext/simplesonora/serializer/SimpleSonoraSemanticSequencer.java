/*
 * generated by Xtext
 */
package org.xtext.simplesonora.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.simplesonora.services.SimpleSonoraGrammarAccess;
import org.xtext.simplesonora.simpleSonora.Chord;
import org.xtext.simplesonora.simpleSonora.Document;
import org.xtext.simplesonora.simpleSonora.Header;
import org.xtext.simplesonora.simpleSonora.Melody;
import org.xtext.simplesonora.simpleSonora.Note;
import org.xtext.simplesonora.simpleSonora.Sequence;
import org.xtext.simplesonora.simpleSonora.SimpleSonoraPackage;

@SuppressWarnings("all")
public class SimpleSonoraSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleSonoraGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SimpleSonoraPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SimpleSonoraPackage.CHORD:
				sequence_Chord(context, (Chord) semanticObject); 
				return; 
			case SimpleSonoraPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case SimpleSonoraPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case SimpleSonoraPackage.MELODY:
				sequence_Melody(context, (Melody) semanticObject); 
				return; 
			case SimpleSonoraPackage.NOTE:
				sequence_Note(context, (Note) semanticObject); 
				return; 
			case SimpleSonoraPackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (chordNotes+=Note chordNotes+=Note+)
	 */
	protected void sequence_Chord(EObject context, Chord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (header=Header melody=Melody)
	 */
	protected void sequence_Document(EObject context, Document semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__HEADER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__HEADER));
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__MELODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.DOCUMENT__MELODY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDocumentAccess().getHeaderHeaderParserRuleCall_0_0(), semanticObject.getHeader());
		feeder.accept(grammarAccess.getDocumentAccess().getMelodyMelodyParserRuleCall_1_0(), semanticObject.getMelody());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (songName=ID tempo=INT key=Key)
	 */
	protected void sequence_Header(EObject context, Header semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.HEADER__SONG_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.HEADER__SONG_NAME));
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.HEADER__TEMPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.HEADER__TEMPO));
			if(transientValues.isValueTransient(semanticObject, SimpleSonoraPackage.Literals.HEADER__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSonoraPackage.Literals.HEADER__KEY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getHeaderAccess().getSongNameIDTerminalRuleCall_0_2_0(), semanticObject.getSongName());
		feeder.accept(grammarAccess.getHeaderAccess().getTempoINTTerminalRuleCall_1_2_0(), semanticObject.getTempo());
		feeder.accept(grammarAccess.getHeaderAccess().getKeyKeyParserRuleCall_2_2_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     sequences+=Sequence+
	 */
	protected void sequence_Melody(EObject context, Melody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (note=NOTE_ID accidental=ACCIDENTAL? duration=DURATION?)
	 */
	protected void sequence_Note(EObject context, Note semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (octave=OCTAVE? (note=Note | chord=Chord))
	 */
	protected void sequence_Sequence(EObject context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
