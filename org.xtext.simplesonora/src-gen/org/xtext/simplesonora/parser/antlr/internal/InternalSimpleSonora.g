/*
 * generated by Xtext
 */
grammar InternalSimpleSonora;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.simplesonora.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.simplesonora.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.simplesonora.services.SimpleSonoraGrammarAccess;

}

@parser::members {

 	private SimpleSonoraGrammarAccess grammarAccess;
 	
    public InternalSimpleSonoraParser(TokenStream input, SimpleSonoraGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected SimpleSonoraGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getHeaderHeaderParserRuleCall_0_0()); 
	    }
		lv_header_0_0=ruleHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		set(
       			$current, 
       			"header",
        		lv_header_0_0, 
        		"Header");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getSongSongParserRuleCall_1_0()); 
	    }
		lv_song_1_0=ruleSong		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		set(
       			$current, 
       			"song",
        		lv_song_1_0, 
        		"Song");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	 iv_ruleHeader=ruleHeader 
	 { $current=$iv_ruleHeader.current; } 
	 EOF 
;

// Rule Header
ruleHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nofeedback_0_0=	'no-feedback' 
    {
        newLeafNode(lv_nofeedback_0_0, grammarAccess.getHeaderAccess().getNofeedbackNoFeedbackKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHeaderRule());
	        }
       		setWithLastConsumed($current, "nofeedback", true, "no-feedback");
	    }

)
)?(	otherlv_1='title' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHeaderAccess().getTitleKeyword_1_0());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHeaderAccess().getEqualsSignKeyword_1_1());
    }
(
(
		lv_songName_3_0=RULE_ID
		{
			newLeafNode(lv_songName_3_0, grammarAccess.getHeaderAccess().getSongNameIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"songName",
        		lv_songName_3_0, 
        		"ID");
	    }

)
))(	otherlv_4='tempo' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHeaderAccess().getTempoKeyword_2_0());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHeaderAccess().getEqualsSignKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeaderAccess().getTempoTempoParserRuleCall_2_2_0()); 
	    }
		lv_tempo_6_0=ruleTempo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeaderRule());
	        }
       		set(
       			$current, 
       			"tempo",
        		lv_tempo_6_0, 
        		"Tempo");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='key' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHeaderAccess().getKeyKeyword_3_0());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getHeaderAccess().getEqualsSignKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeaderAccess().getKeyKeyParserRuleCall_3_2_0()); 
	    }
		lv_key_9_0=ruleKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeaderRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_9_0, 
        		"Key");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTempo
entryRuleTempo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTempoRule()); }
	 iv_ruleTempo=ruleTempo 
	 { $current=$iv_ruleTempo.current; } 
	 EOF 
;

// Rule Tempo
ruleTempo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getTempoAccess().getValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTempoRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getTempoAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTempoRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current; } 
	 EOF 
;

// Rule Key
ruleKey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_note_0_0=RULE_NOTE_ID
		{
			newLeafNode(lv_note_0_0, grammarAccess.getKeyAccess().getNoteNOTE_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"note",
        		lv_note_0_0, 
        		"NOTE_ID");
	    }

)
)(
(
		lv_accidental_1_0=RULE_ACCIDENTAL
		{
			newLeafNode(lv_accidental_1_0, grammarAccess.getKeyAccess().getAccidentalACCIDENTALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accidental",
        		lv_accidental_1_0, 
        		"ACCIDENTAL");
	    }

)
)?((
(
		lv_interval_2_0=	'major' 
    {
        newLeafNode(lv_interval_2_0, grammarAccess.getKeyAccess().getIntervalMajorKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		setWithLastConsumed($current, "interval", lv_interval_2_0, "major");
	    }

)
)
    |(
(
		lv_interval_3_0=	'minor' 
    {
        newLeafNode(lv_interval_3_0, grammarAccess.getKeyAccess().getIntervalMinorKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		setWithLastConsumed($current, "interval", lv_interval_3_0, "minor");
	    }

)
)))
;





// Entry rule entryRuleSong
entryRuleSong returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSongRule()); }
	 iv_ruleSong=ruleSong 
	 { $current=$iv_ruleSong.current; } 
	 EOF 
;

// Rule Song
ruleSong returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSongAccess().getInstrumentsInstrumentParserRuleCall_0()); 
	    }
		lv_instruments_0_0=ruleInstrument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSongRule());
	        }
       		add(
       			$current, 
       			"instruments",
        		lv_instruments_0_0, 
        		"Instrument");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleInstrument
entryRuleInstrument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstrumentRule()); }
	 iv_ruleInstrument=ruleInstrument 
	 { $current=$iv_ruleInstrument.current; } 
	 EOF 
;

// Rule Instrument
ruleInstrument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_instrumentName_0_0=RULE_ID
		{
			newLeafNode(lv_instrumentName_0_0, grammarAccess.getInstrumentAccess().getInstrumentNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstrumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"instrumentName",
        		lv_instrumentName_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstrumentAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstrumentAccess().getSequencesSequenceParserRuleCall_2_0()); 
	    }
		lv_sequences_2_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstrumentRule());
	        }
       		add(
       			$current, 
       			"sequences",
        		lv_sequences_2_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstrumentAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getNoteNoteParserRuleCall_0_0()); 
	    }
		lv_note_0_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_0_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getChordChordParserRuleCall_1_0()); 
	    }
		lv_chord_1_0=ruleChord		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"chord",
        		lv_chord_1_0, 
        		"Chord");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getHarmonyHarmonyParserRuleCall_2_0()); 
	    }
		lv_harmony_2_0=ruleHarmony		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"harmony",
        		lv_harmony_2_0, 
        		"Harmony");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getTupletTupletParserRuleCall_3_0()); 
	    }
		lv_tuplet_3_0=ruleTuplet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"tuplet",
        		lv_tuplet_3_0, 
        		"Tuplet");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_measure_4_0=RULE_MEASURE
		{
			newLeafNode(lv_measure_4_0, grammarAccess.getSequenceAccess().getMeasureMEASURETerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"measure",
        		true, 
        		"MEASURE");
	    }

)
))
;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_octave_0_0=RULE_OCTAVE
		{
			newLeafNode(lv_octave_0_0, grammarAccess.getNoteAccess().getOctaveOCTAVETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"octave",
        		lv_octave_0_0, 
        		"OCTAVE");
	    }

)
)?(
(
		lv_note_1_0=RULE_NOTE_ID
		{
			newLeafNode(lv_note_1_0, grammarAccess.getNoteAccess().getNoteNOTE_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"note",
        		lv_note_1_0, 
        		"NOTE_ID");
	    }

)
)(
(
		lv_accidental_2_0=RULE_ACCIDENTAL
		{
			newLeafNode(lv_accidental_2_0, grammarAccess.getNoteAccess().getAccidentalACCIDENTALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accidental",
        		lv_accidental_2_0, 
        		"ACCIDENTAL");
	    }

)
)?(
(
		lv_duration_3_0=RULE_DURATION
		{
			newLeafNode(lv_duration_3_0, grammarAccess.getNoteAccess().getDurationDURATIONTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_3_0, 
        		"DURATION");
	    }

)
)?(
(
		lv_point_4_0=	'.' 
    {
        newLeafNode(lv_point_4_0, grammarAccess.getNoteAccess().getPointFullStopKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed($current, "point", true, ".");
	    }

)
)?(
(
		lv_tie_5_0=	'_' 
    {
        newLeafNode(lv_tie_5_0, grammarAccess.getNoteAccess().getTie_Keyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed($current, "tie", true, "_");
	    }

)
)?)
;





// Entry rule entryRuleChord
entryRuleChord returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChordRule()); }
	 iv_ruleChord=ruleChord 
	 { $current=$iv_ruleChord.current; } 
	 EOF 
;

// Rule Chord
ruleChord returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChordAccess().getChordNotesNoteParserRuleCall_0_0()); 
	    }
		lv_chordNotes_0_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChordRule());
	        }
       		add(
       			$current, 
       			"chordNotes",
        		lv_chordNotes_0_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChordAccess().getSolidusKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChordAccess().getChordNotesNoteParserRuleCall_1_0_1_0()); 
	    }
		lv_chordNotes_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChordRule());
	        }
       		add(
       			$current, 
       			"chordNotes",
        		lv_chordNotes_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
))+
    |(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChordAccess().getSolidusKeyword_1_1_0());
    }
(
(
		lv_chordName_4_0=RULE_ID
		{
			newLeafNode(lv_chordName_4_0, grammarAccess.getChordAccess().getChordNameIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"chordName",
        		lv_chordName_4_0, 
        		"ID");
	    }

)
)((
(
		lv_inversion_5_0=	'^' 
    {
        newLeafNode(lv_inversion_5_0, grammarAccess.getChordAccess().getInversionCircumflexAccentKeyword_1_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChordRule());
	        }
       		setWithLastConsumed($current, "inversion", lv_inversion_5_0, "^");
	    }

)
)
    |(
(
		lv_inversion_6_0=	'^^' 
    {
        newLeafNode(lv_inversion_6_0, grammarAccess.getChordAccess().getInversionCircumflexAccentCircumflexAccentKeyword_1_1_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChordRule());
	        }
       		setWithLastConsumed($current, "inversion", lv_inversion_6_0, "^^");
	    }

)
))?)))
;





// Entry rule entryRuleHarmony
entryRuleHarmony returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHarmonyRule()); }
	 iv_ruleHarmony=ruleHarmony 
	 { $current=$iv_ruleHarmony.current; } 
	 EOF 
;

// Rule Harmony
ruleHarmony returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHarmonyAccess().getHarmonyNotesNoteParserRuleCall_0_0()); 
	    }
		lv_harmonyNotes_0_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHarmonyRule());
	        }
       		add(
       			$current, 
       			"harmonyNotes",
        		lv_harmonyNotes_0_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHarmonyAccess().getSolidusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHarmonyAccess().getHarmonyNotesNoteParserRuleCall_1_1_0()); 
	    }
		lv_harmonyNotes_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHarmonyRule());
	        }
       		add(
       			$current, 
       			"harmonyNotes",
        		lv_harmonyNotes_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHarmonyAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHarmonyAccess().getNotesNoteParserRuleCall_3_0()); 
	    }
		lv_notes_4_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHarmonyRule());
	        }
       		add(
       			$current, 
       			"notes",
        		lv_notes_4_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHarmonyAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTuplet
entryRuleTuplet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupletRule()); }
	 iv_ruleTuplet=ruleTuplet 
	 { $current=$iv_ruleTuplet.current; } 
	 EOF 
;

// Rule Tuplet
ruleTuplet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTupletAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupletAccess().getTupletNoteParserRuleCall_1_0_0()); 
	    }
		lv_tuplet_1_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupletRule());
	        }
       		add(
       			$current, 
       			"tuplet",
        		lv_tuplet_1_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTupletAccess().getTupletChordParserRuleCall_1_1_0()); 
	    }
		lv_tuplet_2_0=ruleChord		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupletRule());
	        }
       		add(
       			$current, 
       			"tuplet",
        		lv_tuplet_2_0, 
        		"Chord");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupletAccess().getRightParenthesisKeyword_2());
    }
(
(
		lv_duration_4_0=RULE_DURATION
		{
			newLeafNode(lv_duration_4_0, grammarAccess.getTupletAccess().getDurationDURATIONTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTupletRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_4_0, 
        		"DURATION");
	    }

)
))
;





RULE_OCTAVE : ('<'+|'o' '0'..'9'|'>'+);

RULE_ACCIDENTAL : ('+'|'-'|'@');

RULE_NOTE_ID : ('a'..'g'|'A'..'G'|('R'|'r'));

RULE_DURATION : ':' ('1'|'2'|'4'|'8'|'16'|'32'|'64'|'128');

RULE_MEASURE : '|'?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


